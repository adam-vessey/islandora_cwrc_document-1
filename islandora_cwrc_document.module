<?php
/**
 * @file
 * Defines hooks and required objects for the module.
 */

define('ISLANDORA_CWRC_DOCUMENT_COLLECTION_PID', 'cwrc:documentCollection');
define('ISLANDORA_CWRC_DOCUMENT_CONTENT_MODEL', 'cwrc:documentCModel');
define('ISLANDORA_CWRC_DOCUMENT_EDIT_CWRC', 'edit CWRC datastreams');

/**
 * Implements hook_menu().
 */
function islandora_cwrc_document_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/cwrc-writer'] = array(
    'title' => 'CWRC Writer',
    'page callback' => 'islandora_cwrc_document_display_cwrc_writer',
    'page arguments' => array(2),
    'access callback' => 'islandora_cwrc_document_access_callback',
    'access arguments' => array(ISLANDORA_CWRC_DOCUMENT_EDIT_CWRC, 2),
    'load arguments' => array(2),
    'file' => 'includes/utilities.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['islandora/object/%islandora_object/note.htm'] = array(
    'title' => 'CWRC Writer Note',
    'page callback' => 'islandora_cwrc_document_display_cwrc_writer_note',
    'access callback' => 'islandora_object_access',
    'access arguments' => array(ISLANDORA_CWRC_DOCUMENT_EDIT_CWRC, 2),
    'file' => 'includes/utilities.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function islandora_cwrc_document_menu_alter(&$items) {
  $path = drupal_get_path('module', 'islandora_cwrc_document');
  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/view'] = array(
    'title' => 'View datastream',
    'page callback' => 'islandora_cwrc_document_view_datastream',
    'page arguments' => array(4, FALSE, NULL),
    'type' => MENU_CALLBACK,
    'file' => "$path/includes/utilities.inc",
    'access callback' => 'islandora_datastream_access',
    'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    'load arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/version/%/view'] = array(
    'title' => 'View datastream version',
    'page callback' => 'islandora_cwrc_document_view_datastream',
    'page arguments' => array(4, FALSE, 6),
    'type' => MENU_CALLBACK,
    'file' => "$path/includes/utilities.inc",
    'access callback' => 'islandora_datastream_access',
    'access arguments' => array(ISLANDORA_VIEW_DATASTREAM_HISTORY, 4),
    'load_arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/download'] = array(
    'title' => 'Download datastream',
    'page callback' => 'islandora_cwrc_document_download_datastream',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => "$path/includes/utilities.inc",
    'access callback' => 'islandora_datastream_access',
    'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 4),
    'load arguemnts' => array(2),
  );
}

/**
 * Checks whether the user can access the given object's CWRC-Writer tab.
 *
 * Checks for object existance, accessiblitly, namespace permissions,
 * and user permissions
 *
 * @param string $op
 *   The permission to test for.
 * @param AbstractObject $object
 *   The object to test, if NULL given the object doesn't exist or is
 *   inaccessible.
 *
 * @return bool
 *   TRUE if the user is allowed to access this object, FALSE otherwise.
 */
function islandora_cwrc_document_access_callback($op, $object = NULL) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  if (!$object && !islandora_describe_repository()) {
    islandora_display_repository_inaccessible_message();
    return FALSE;
  }
  if (!in_array(ISLANDORA_CWRC_DOCUMENT_CONTENT_MODEL, $object->models)) {
    return FALSE;
  }
  return isset($object['CWRC']) && islandora_datastream_access($op, $object['CWRC']);
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_cwrc_document_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_cwrc_document');
  $islandora_path = drupal_get_path('module', 'islandora');
  $repository = $connection->repository;
  $root_pid = variable_get('islandora_repository_pid', 'islandora:root');

  // Collection object.
  $document_collection = $repository->constructObject(ISLANDORA_CWRC_DOCUMENT_COLLECTION_PID);
  $document_collection->owner = 'fedoraAdmin';
  $document_collection->label = 'CWRC Document Collection';
  $document_collection->models = 'islandora:collectionCModel';
  $document_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $root_pid);
  // Collection policy.
  $cp = $document_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $cp->label = 'Collection policy';
  $cp->mimetype = 'application/xml';
  $cp->setContentFromFile("$module_path/xml/cwrc_document_collection_policy.xml", FALSE);
  $document_collection->ingestDatastream($cp);

  // Thumbnail.
  $tn = $document_collection->constructDatastream('TN', 'M');
  $tn->label = 'Thumbnail';
  $tn->mimetype = 'image/png';
  $tn->setcontentFromFile("$islandora_path/images/folder.png", FALSE);
  $document_collection->ingestDatastream($tn);

  // Document content model.
  $document_cmodel = $repository->constructObject(ISLANDORA_CWRC_DOCUMENT_CONTENT_MODEL);
  $document_cmodel->owner = 'fedoraAdmin';
  $document_cmodel->label = 'CWRC Document Content Model';
  $document_cmodel->models = 'fedora-system:ContentModel-3.0';

  // DS-COMPOSITE-MODEL.
  $ds = $document_cmodel->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $ds->label = "DS-COMPOSITE-MODEL";
  $ds->mimetype = 'application/xml';
  $ds->setContentFromFile("$module_path/xml/cwrc_document_ds_composite_model.xml", FALSE);
  $document_cmodel->ingestDatastream($ds);

  return array(
    'islandora_cwrc_document' => array(
      'title' => 'Islandora CWRC Document',
      'objects' => array(
        $document_collection,
        $document_cmodel,
      ),
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_ingest_steps().
 */
function islandora_cwrc_document_cwrc_documentCModel_islandora_ingest_steps() {
  return array(
    'islandora_cwrc_document_upload' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_cwrc_document_upload_form',
      'module' => 'islandora_cwrc_document',
      'file' => 'includes/upload.form.inc',
    ),
  );
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
function islandora_cwrc_document_islandora_edit_datastream_registry(AbstractObject $object, AbstractDatastream $ds) {
  if (in_array('cwrc:documentCModel', $object->models) && $ds->id == 'CWRC') {
    return array(
      array(
        'name' => t('Islandora CWRC Document'),
        'url' => "islandora/object/{$object->id}/cwrc-writer",
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function islandora_cwrc_document_permission() {
  return array(
    ISLANDORA_CWRC_DOCUMENT_EDIT_CWRC => array(
      'title' => t('Edit CWRC documents'),
      'description' => t('Modify XML within the CWRC-Writer'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function islandora_cwrc_document_form_islandora_datastream_version_replace_form_alter(&$form, &$form_state, $form_id) {
  // On Datastream replace for CWRC datastream modify valid file extensions and
  // add a validation function to check that the uploaded xml file is
  // well-formed.
  if ($form_state['dsid'] == 'CWRC') {
    $form['dsid_fieldset']['file']['#upload_validators']['file_validate_extensions'] = array('xml');
    $form['#validate'][] = 'islandora_cwrc_document_xml_validate';
  }
}

/**
 * Custom form validation for CWRC datastream replace to uploaded xml.
 */
function islandora_cwrc_document_xml_validate($form, &$form_state) {
  module_load_include('inc', 'islandora_cwrc_document', 'includes/utilities');
  $file = file_load($form_state['values']['file']);
  if ($file === FALSE) {
    return;
  }
  if (!islandora_cwrc_document_check_xml($file)) {
    form_set_error('dsid_fieldset][file', t('The uploaded file @file is not well-formed XML.', array('@file' => $file->filename)));
  }
}
